// Responsive media queries
// use:
//  .element {
//    @include breakpoint(mobile|tablet|desktop|desktop-large){
//      ...
//    }
//   }
@mixin breakpoint($breakpoint) {
  @if $breakpoint == "" {
    @content;
  } @else {
    // Retrieves the value from the key
    $value: map-get($breakpoints, $breakpoint);

    // If the key exists in the map
    @if $value {
      // Prints a media query based on the value
      @media (min-width: $value) {
        @content;
      }
    }

    // If the key doesn't exist in the map
    @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`.";
    }
  }
}

@mixin breakpoint-landscape($breakpoint) {
  @if $breakpoint == "" {
    @content;
  } @else {
    // Retrieves the value from the key
    $value: map-get($breakpoints, $breakpoint);

    // If the key exists in the map
    @if $value {
      // Prints a media query based on the value
      @media (min-width: $value) and (orientation: landscape) {
        @content;
      }
    }

    // If the key doesn't exist in the map
    @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`.";
    }
  }
}

// Detection for Hover Devices
// use:
// @include hover() {
//    element:hover{
//      ...custom styles...
//    }
//  }

@mixin hover() {
  @media (hover: hover) {
    @content;
  }
}

// REM conversor
// use:
//  .element {
//    height: rem(50);
//   }
@function rem($size) {
  @return #{$size / $f-base}rem;
}

// Mixin for adding axuliar classes to margin or padding to element
// use:
// <div className="mr-2">
@mixin generate($prefix, $property) {
  $spacing: 4px;

  @for $i from 0 through 12 {
    .#{$prefix}-#{$i} {
      #{$property}: ($i) * $spacing;
    }

    @include breakpoint(tablet) {
      .#{$prefix}-sm-#{$i} {
        #{$property}: ($i) * $spacing !important;
      }
    }

    @include breakpoint(desktop) {
      .#{$prefix}-md-#{$i} {
        #{$property}: ($i) * $spacing !important;
      }
    }
  }
}

$rules: (
  (ml, margin-left),
  (mt, margin-top),
  (mb, margin-bottom),
  (mr, margin-right),
  (pl, padding-left),
  (pt, padding-top),
  (pb, padding-bottom),
  (pr, padding-right),
  (pa, padding),
  (ma, margin)
);

@each $item in $rules {
  @include generate(nth($item, 1), nth($item, 2));
}

@mixin translate-x($x) {
  transform: translateX($x);
}
